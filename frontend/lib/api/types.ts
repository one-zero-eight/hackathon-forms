/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Me
     * @description Get current user info if authenticated
     */
    get: operations["users_get_me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/new-hr": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Hr
     * @description Create HR-user. Requires manager or admin rights.
     */
    post: operations["users_create_hr"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/email/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Start Email Flow */
    post: operations["start_email_flow"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/email/validate-code-for-users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** End Email Flow */
    post: operations["end_email_flow"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** Body_end_email_flow */
    Body_end_email_flow: {
      /**
       * Email Flow Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      email_flow_id: string;
      /** Verification Code */
      verification_code: string;
    };
    /** Body_start_email_flow */
    Body_start_email_flow: {
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** CreateUser */
    CreateUser: {
      /** Email */
      email: string;
      /** Name */
      name?: string | null;
    };
    /** EmailFlowReference */
    EmailFlowReference: {
      /**
       * Email Flow Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      email_flow_id: string;
    };
    /** EmailFlowResult */
    EmailFlowResult: {
      status: components["schemas"]["EmailFlowVerificationStatus"];
      /** Email */
      email?: string | null;
    };
    /**
     * EmailFlowVerificationStatus
     * @enum {string}
     */
    EmailFlowVerificationStatus: EmailFlowVerificationStatus;
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** User */
    User: {
      /**
       * Id
       * Format: objectid
       * @description MongoDB document ObjectID
       * @default None
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      /** Name */
      name: string | null;
      /** Email */
      email: string;
      role: components["schemas"]["UserRole"];
    };
    /**
     * UserRole
     * @enum {string}
     */
    UserRole: UserRole;
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaBodyEndEmailFlow =
  components["schemas"]["Body_end_email_flow"];
export type SchemaBodyStartEmailFlow =
  components["schemas"]["Body_start_email_flow"];
export type SchemaCreateUser = components["schemas"]["CreateUser"];
export type SchemaEmailFlowReference =
  components["schemas"]["EmailFlowReference"];
export type SchemaEmailFlowResult = components["schemas"]["EmailFlowResult"];
export type SchemaEmailFlowVerificationStatus =
  components["schemas"]["EmailFlowVerificationStatus"];
export type SchemaHttpValidationError =
  components["schemas"]["HTTPValidationError"];
export type SchemaUser = components["schemas"]["User"];
export type SchemaUserRole = components["schemas"]["UserRole"];
export type SchemaValidationError = components["schemas"]["ValidationError"];
export type $defs = Record<string, never>;
export interface operations {
  users_get_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Current user info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  users_create_hr: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUser"];
      };
    };
    responses: {
      /** @description Created user info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  start_email_flow: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_start_email_flow"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EmailFlowReference"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  end_email_flow: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_end_email_flow"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EmailFlowResult"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
export enum EmailFlowVerificationStatus {
  success = "success",
  expired = "expired",
  incorrect = "incorrect",
  not_found = "not_found",
}
export enum UserRole {
  hr = "hr",
  manager = "manager",
  admin = "admin",
}
